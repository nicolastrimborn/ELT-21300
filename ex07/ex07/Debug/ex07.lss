
ex07.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000182  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  000001f6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001f6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000228  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  00000268  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000793  00000000  00000000  000002b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000069a  00000000  00000000  00000a4b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002d3  00000000  00000000  000010e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000cc  00000000  00000000  000013b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003a3  00000000  00000000  00001484  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000cb  00000000  00000000  00001827  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  000018f2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 64 00 	call	0xc8	; 0xc8 <main>
  88:	0c 94 bf 00 	jmp	0x17e	; 0x17e <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <setDirection>:
	ADMUX |= (1 << REFS0); // AVcc with external capacitor on AREF pin. MUX 3...0 0x00 = ADC0
	ADCSRA |= (1 << ADEN); // Enable the ADC
	ADCSRA |= (1 << ADIE); // Enable interrupts
	ADCSRA |= (1 << ADPS0)|(1 << ADPS1)|(1 << ADPS2); //ADC prescaler 128 (16M/128  = 125k)  
	sei();
	ADCSRA |= (1 << ADSC); // Start the ADC conversion
  90:	01 97       	sbiw	r24, 0x01	; 1
  92:	11 f4       	brne	.+4      	; 0x98 <setDirection+0x8>
  94:	5d 9a       	sbi	0x0b, 5	; 11
  96:	08 95       	ret
  98:	5d 98       	cbi	0x0b, 5	; 11
  9a:	08 95       	ret

0000009c <setMotor>:
  9c:	01 97       	sbiw	r24, 0x01	; 1
  9e:	11 f4       	brne	.+4      	; 0xa4 <setMotor+0x8>
  a0:	5d 9a       	sbi	0x0b, 5	; 11
  a2:	08 95       	ret
  a4:	5f 98       	cbi	0x0b, 7	; 11
  a6:	08 95       	ret

000000a8 <init_pwm_timer0>:
  a8:	80 e8       	ldi	r24, 0x80	; 128
  aa:	87 bd       	out	0x27, r24	; 39
  ac:	84 b5       	in	r24, 0x24	; 36
  ae:	80 68       	ori	r24, 0x80	; 128
  b0:	84 bd       	out	0x24, r24	; 36
  b2:	84 b5       	in	r24, 0x24	; 36
  b4:	83 60       	ori	r24, 0x03	; 3
  b6:	84 bd       	out	0x24, r24	; 36
  b8:	85 b5       	in	r24, 0x25	; 37
  ba:	83 60       	ori	r24, 0x03	; 3
  bc:	85 bd       	out	0x25, r24	; 37
  be:	08 95       	ret

000000c0 <init_io>:
  c0:	8a b1       	in	r24, 0x0a	; 10
  c2:	80 6e       	ori	r24, 0xE0	; 224
  c4:	8a b9       	out	0x0a, r24	; 10
  c6:	08 95       	ret

000000c8 <main>:
  c8:	0e 94 60 00 	call	0xc0	; 0xc0 <init_io>
  cc:	0e 94 54 00 	call	0xa8	; 0xa8 <init_pwm_timer0>
  d0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  d4:	87 bd       	out	0x27, r24	; 39
  d6:	81 e0       	ldi	r24, 0x01	; 1
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	0e 94 48 00 	call	0x90	; 0x90 <setDirection>
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	0e 94 4e 00 	call	0x9c	; 0x9c <setMotor>
  e6:	f4 cf       	rjmp	.-24     	; 0xd0 <main+0x8>

000000e8 <__vector_21>:
}


ISR( ADC_vect )
{
  e8:	1f 92       	push	r1
  ea:	0f 92       	push	r0
  ec:	0f b6       	in	r0, 0x3f	; 63
  ee:	0f 92       	push	r0
  f0:	11 24       	eor	r1, r1
  f2:	2f 93       	push	r18
  f4:	3f 93       	push	r19
  f6:	4f 93       	push	r20
  f8:	5f 93       	push	r21
  fa:	6f 93       	push	r22
  fc:	7f 93       	push	r23
  fe:	8f 93       	push	r24
 100:	9f 93       	push	r25
 102:	af 93       	push	r26
 104:	bf 93       	push	r27
 106:	ef 93       	push	r30
 108:	ff 93       	push	r31
	DC_motor_speed = ( 255 * ADC ) / 1023; //scale to fit in 8bit value
 10a:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 10e:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 112:	4f ef       	ldi	r20, 0xFF	; 255
 114:	42 9f       	mul	r20, r18
 116:	c0 01       	movw	r24, r0
 118:	43 9f       	mul	r20, r19
 11a:	90 0d       	add	r25, r0
 11c:	11 24       	eor	r1, r1
 11e:	6f ef       	ldi	r22, 0xFF	; 255
 120:	73 e0       	ldi	r23, 0x03	; 3
 122:	0e 94 ab 00 	call	0x156	; 0x156 <__udivmodhi4>
 126:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <_edata>
	ADCSRA |= 1 << ADSC;
 12a:	ea e7       	ldi	r30, 0x7A	; 122
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	80 81       	ld	r24, Z
 130:	80 64       	ori	r24, 0x40	; 64
 132:	80 83       	st	Z, r24
}
 134:	ff 91       	pop	r31
 136:	ef 91       	pop	r30
 138:	bf 91       	pop	r27
 13a:	af 91       	pop	r26
 13c:	9f 91       	pop	r25
 13e:	8f 91       	pop	r24
 140:	7f 91       	pop	r23
 142:	6f 91       	pop	r22
 144:	5f 91       	pop	r21
 146:	4f 91       	pop	r20
 148:	3f 91       	pop	r19
 14a:	2f 91       	pop	r18
 14c:	0f 90       	pop	r0
 14e:	0f be       	out	0x3f, r0	; 63
 150:	0f 90       	pop	r0
 152:	1f 90       	pop	r1
 154:	18 95       	reti

00000156 <__udivmodhi4>:
 156:	aa 1b       	sub	r26, r26
 158:	bb 1b       	sub	r27, r27
 15a:	51 e1       	ldi	r21, 0x11	; 17
 15c:	07 c0       	rjmp	.+14     	; 0x16c <__udivmodhi4_ep>

0000015e <__udivmodhi4_loop>:
 15e:	aa 1f       	adc	r26, r26
 160:	bb 1f       	adc	r27, r27
 162:	a6 17       	cp	r26, r22
 164:	b7 07       	cpc	r27, r23
 166:	10 f0       	brcs	.+4      	; 0x16c <__udivmodhi4_ep>
 168:	a6 1b       	sub	r26, r22
 16a:	b7 0b       	sbc	r27, r23

0000016c <__udivmodhi4_ep>:
 16c:	88 1f       	adc	r24, r24
 16e:	99 1f       	adc	r25, r25
 170:	5a 95       	dec	r21
 172:	a9 f7       	brne	.-22     	; 0x15e <__udivmodhi4_loop>
 174:	80 95       	com	r24
 176:	90 95       	com	r25
 178:	bc 01       	movw	r22, r24
 17a:	cd 01       	movw	r24, r26
 17c:	08 95       	ret

0000017e <_exit>:
 17e:	f8 94       	cli

00000180 <__stop_program>:
 180:	ff cf       	rjmp	.-2      	; 0x180 <__stop_program>
